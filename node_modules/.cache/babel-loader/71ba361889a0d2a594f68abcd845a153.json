{"ast":null,"code":"var _jsxFileName = \"/Users/wesleyliu/minesweeper-project/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.handleClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: Array(this.props.xval * this.props.yval).fill(2),\n      shown: Array(this.props.xval * this.props.yval).fill(false)\n    };\n  }\n\n  generateSquare(value) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.state.shown[value] ? this.props.board[value] : null,\n      handleClick: () => this.handleClick(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  }\n\n  handleClick(val) {\n    const curr = this.state.shown.slice();\n    curr[val] = true;\n    console.log(curr);\n    this.setState({\n      board: this.props.gameboard,\n      shown: curr\n    });\n  }\n\n  generateBoard(val1, val2) {\n    var list = [];\n\n    for (var i = 0; i <= val1 - 1; i++) {\n      list.push(i);\n    }\n\n    var list2 = [];\n\n    for (var x = 0; x <= val2 - 1; x++) {\n      list2.push(x);\n    }\n\n    return list2.map(m => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: list.map(n => {\n          return this.generateSquare(m * val1 + n);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this);\n    });\n  }\n\n  render() {\n    return this.generateBoard(this.props.xval, this.props.yval);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      xval: this.props.xval,\n      yval: this.props.yval,\n      gameboard: Array(this.props.xval * this.props.yval).fill(0),\n      index: 0\n    };\n  }\n\n  generateRandomBoard() {\n    bombs = getRandomInt(5, 5 + Math.floor(this.state.xval * this.state.yval / 2));\n\n    while (bombs > 0) {\n      cRow = getRandomInt(0, this.state.xval);\n      cCol = getRandomInt(0, this.state.yval);\n      ind = cRow * this.state.xval + cCol;\n\n      if (this.state.gameboard[ind] != 'B') {\n        curr = this.state.gameboard.slice();\n        curr[ind] = 'B';\n        this.setState({\n          xval: this.props.xval,\n          yval: this.props.yval,\n          gameboard: curr,\n          index: 0\n        });\n      }\n    }\n  }\n\n  renderBoard() {\n    return /*#__PURE__*/_jsxDEV(Board, {\n      xval: this.state.xval,\n      yval: this.state.yval,\n      board: Array(this.state.yval * this.state.xval).fill(2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    return this.renderBoard();\n  }\n\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Game, {\n      xval: 9,\n      yval: 9\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/wesleyliu/minesweeper-project/src/App.js"],"names":["React","ReactDOM","Square","props","handleClick","value","Board","Component","constructor","state","board","Array","xval","yval","fill","shown","generateSquare","val","curr","slice","console","log","setState","gameboard","generateBoard","val1","val2","list","i","push","list2","x","map","m","n","render","Game","index","generateRandomBoard","bombs","getRandomInt","Math","floor","cRow","cCol","ind","renderBoard","App","min","max","ceil","random"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.handleClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      board:Array(this.props.xval * this.props.yval).fill(2),\n      shown: Array(this.props.xval * this.props.yval).fill(false),\n    };\n  }\n  generateSquare(value){\n    return (<Square\n      value = {this.state.shown[value] ? this.props.board[value] : null}\n      handleClick = {() => this.handleClick(value)}\n    />);\n  }\n  handleClick(val){\n    const curr = this.state.shown.slice()\n    curr[val] = true\n    console.log(curr)\n    this.setState(\n      {\n        board:this.props.gameboard,\n        shown: curr,\n      }\n    );\n  }\n  generateBoard(val1, val2){\n    var list = [];\n    for (var i = 0; i <= val1-1; i++) {\n      list.push(i);\n    }\n    var list2 = [];\n    for (var x = 0; x <= val2-1; x++){\n      list2.push(x)\n    }\n    return(\n      list2.map((m) => {return(\n          <div className = \"board-row\">\n            {list.map((n) => {return this.generateSquare(m*(val1)+n);})}\n          </div>\n        )}\n      )\n      )\n  }\n  render(){\n    return(\n      this.generateBoard(this.props.xval,this.props.yval)\n    );\n  }\n}\n\nclass Game extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      xval:this.props.xval,\n      yval:this.props.yval,\n      gameboard: Array(this.props.xval*this.props.yval).fill(0),\n      index:0\n    };\n  }\n  generateRandomBoard(){\n    bombs = getRandomInt(5, 5 + Math.floor((this.state.xval*this.state.yval)/2))\n    while(bombs > 0){\n      cRow = getRandomInt(0, this.state.xval)\n      cCol = getRandomInt(0, this.state.yval)\n      ind = cRow*this.state.xval + cCol\n      if(this.state.gameboard[ind] != 'B'){\n        curr = this.state.gameboard.slice()\n        curr[ind] = 'B'\n        this.setState({\n            xval:this.props.xval,\n            yval:this.props.yval,\n            gameboard: curr,\n            index:0\n        })\n      }\n    }\n  }\n  renderBoard(){\n    return(\n      <Board\n        xval = {this.state.xval}\n        yval = {this.state.yval}\n        board = {Array(this.state.yval*this.state.xval).fill(2)}\n      />\n    );\n  }\n  render(){\n    return(\n      this.renderBoard()\n    );\n  }\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game\n        xval = {9}\n        yval = {9}\n      />\n    </div>\n  );\n}\n\nexport default App;\n\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}"]},"metadata":{},"sourceType":"module"}